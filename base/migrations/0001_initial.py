# -*- coding: utf-8 -*-
# Generated by Django 1.11.3 on 2017-07-15 13:29
from __future__ import unicode_literals

import base.models.etablissement
from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import re


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0008_alter_user_username_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.ASCIIUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=30, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('sexe', models.PositiveSmallIntegerField(choices=[(1, b'homme'), (2, b'femme')])),
            ],
            options={
                'abstract': False,
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Academie',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nom', models.CharField(max_length=100)),
                ('slug', models.SlugField()),
                ('departements', models.CharField(max_length=100, validators=[django.core.validators.RegexValidator(re.compile('^\\d+(?:\\,\\d+)*\\Z'), code='invalid', message='Enter only digits separated by commas.')], verbose_name=b'D\xc3\xa9partements')),
            ],
        ),
        migrations.CreateModel(
            name='Annee',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nom', models.CharField(max_length=100)),
                ('debut', models.DateField()),
                ('fin', models.DateField()),
            ],
            options={
                'ordering': ['debut'],
                'verbose_name': ['ann\xe9e scolaire'],
                'verbose_name_plural': ['ann\xe9es scolaires'],
            },
        ),
        migrations.CreateModel(
            name='Configuration',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='Enseignement',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('option', models.BooleanField()),
                ('specialite', models.BooleanField()),
            ],
            options={
                'ordering': ['classe', 'matiere'],
            },
        ),
        migrations.CreateModel(
            name='Etablissement',
            fields=[
                ('numero_uai', models.CharField(max_length=8, primary_key=True, serialize=False, unique=True, validators=[django.core.validators.RegexValidator(message=b"Un num\xc3\xa9ro UAI doit \xc3\xaatre constitu\xc3\xa9 de sept chiffres suivis d'une lettre code", regex=b'\\d{7,7}[a-z][A-Z]'), base.models.etablissement.validateur_lettre23], verbose_name=b'UAI')),
                ('appellation', models.CharField(max_length=100)),
                ('denomination', models.CharField(max_length=100)),
                ('adresse', models.TextField(blank=True, verbose_name=b"Adresse de l'\xc3\xa9tablissement")),
                ('email', models.EmailField(max_length=254)),
                ('nature_uai', models.PositiveSmallIntegerField(choices=[(101, b'\xc3\x89cole maternelle'), (102, b"\xc3\x89cole maternelle annexe d'ESP\xc3\x89"), (103, b"\xc3\x89cole maternelle d'application"), (111, b'\xc3\x89cole maternelle sp\xc3\xa9cialis\xc3\xa9e'), (151, b'\xc3\x89cole \xc3\xa9l\xc3\xa9mentaire'), (152, b"\xc3\x89cole \xc3\xa9l\xc3\xa9mentaire annexe d'ESP\xc3\x89"), (153, b"\xc3\x89cole \xc3\xa9l\xc3\xa9mentaire d'application"), (160, b'\xc3\x89cole de plein air'), (162, b'\xc3\x89cole \xc3\xa9l\xc3\xa9mentaire sp\xc3\xa9cialis\xc3\xa9e'), (169, b'\xc3\x89cole r\xc3\xa9gionale du premier degr\xc3\xa9'), (170, b'\xc3\x89cole sans effectif permanent'), (300, b"Lyc\xc3\xa9e d'enseignement g\xc3\xa9n\xc3\xa9ral et technologique"), (301, b"Lyc\xc3\xa9e d'enseignement technologique"), (302, b"Lyc\xc3\xa9e d'enseignement g\xc3\xa9n\xc3\xa9ral"), (306, b'Lyc\xc3\xa9e polyvalent'), (310, b'Lyc\xc3\xa9e climatique'), (312, b'\xc3\x89cole secondaire sp\xc3\xa9cialis\xc3\xa9e (second cycle)'), (315, b'\xc3\x89tablissement exp\xc3\xa9rimental'), (320, b'Lyc\xc3\xa9e professionnel'), (332, b'\xc3\x89cole professionnelle sp\xc3\xa9cialis\xc3\xa9e'), (334, b"Section d'enseignement professionnel"), (335, b"Section d'enseignement g\xc3\xa9n\xc3\xa9ral ou technologique"), (340, b'Coll\xc3\xa8ge'), (349, b'\xc3\x89tablissement de r\xc3\xa9insertion scolaire'), (350, b'Coll\xc3\xa8ge climatique'), (352, b'Coll\xc3\xa8ge sp\xc3\xa9cialis\xc3\xa9'), (370, b"\xc3\x89tablissement r\xc3\xa9gional d'enseignement adapt\xc3\xa9"), (390, b"Section d'enseignement g\xc3\xa9n\xc3\xa9ral et professionnel adapt\xc3\xa9")])),
                ('academie', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='base.Academie', verbose_name=b'Acad\xc3\xa9mie')),
            ],
            options={
                'ordering': ['numero_uai'],
                'verbose_name': '\xe9tablissement',
                'verbose_name_plural': '\xe9tablissements',
            },
        ),
        migrations.CreateModel(
            name='Groupe',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nom', models.CharField(max_length=100)),
                ('mode', models.PositiveSmallIntegerField(choices=[(0, b'manuel'), (1, b'automatique')], default=0)),
            ],
        ),
        migrations.CreateModel(
            name='Matiere',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nom', models.CharField(max_length=100)),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='base.Matiere')),
            ],
            options={
                'verbose_name': 'mati\xe8re',
                'verbose_name_plural': 'mati\xe8res',
            },
        ),
        migrations.CreateModel(
            name='Service',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('debut', models.DateField(blank=True, null=True, verbose_name=b'Date de d\xc3\xa9but')),
                ('fin', models.DateField(blank=True, null=True, verbose_name=b'Date de fin')),
                ('enseignement', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='base.Enseignement')),
            ],
        ),
        migrations.CreateModel(
            name='Classe',
            fields=[
                ('groupe_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='base.Groupe')),
                ('niveau', models.PositiveSmallIntegerField(choices=[(1, b'1\xc3\xa8 ann\xc3\xa9e'), (2, b'2\xc3\xa8 ann\xc3\xa9e')])),
            ],
            options={
                'ordering': ['annee', 'niveau', 'nom'],
            },
            bases=('base.groupe',),
        ),
        migrations.CreateModel(
            name='Etudiant',
            fields=[
                ('user_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('entree', models.DateField(blank=True, null=True)),
                ('sortie', models.DateField(blank=True, null=True)),
                ('ine', models.CharField(max_length=11, validators=[django.core.validators.RegexValidator(message=b"Un num\xc3\xa9ro INE doit \xc3\xaatre constitu\xc3\xa9 de dix chiffres suivis d'une lettre code", regex=b'\\d{10,10}[a-z][A-Z]'), base.models.etablissement.validateur_lettre23], verbose_name=b"INE (num\xc3\xa9ro d'\xc3\xa9tudiant)")),
                ('classe', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='base.Classe')),
                ('options', models.ManyToManyField(to='base.Matiere')),
                ('origine', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='base.Etablissement', verbose_name=b"\xc3\x89tablissement d'origine")),
            ],
            options={
                'verbose_name': '\xe9tudiant',
                'verbose_name_plural': '\xe9tudiants',
            },
            bases=('base.user',),
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Professeur',
            fields=[
                ('user_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('corps', models.PositiveSmallIntegerField(choices=[(0, b'autre'), (1, b'certifi\xc3\xa9'), (2, b'agr\xc3\xa9g\xc3\xa9'), (3, b'chaire sup\xc3\xa9rieure')], default=2)),
                ('etablissement', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='base.Etablissement')),
            ],
            options={
                'abstract': False,
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
            },
            bases=('base.user',),
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.AddField(
            model_name='groupe',
            name='annee',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='base.Annee'),
        ),
        migrations.AddField(
            model_name='groupe',
            name='enseignements',
            field=models.ManyToManyField(to='base.Enseignement'),
        ),
        migrations.AddField(
            model_name='enseignement',
            name='matiere',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='base.Matiere'),
        ),
        migrations.AddField(
            model_name='configuration',
            name='etablissement',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='base.Etablissement'),
        ),
        migrations.AddField(
            model_name='user',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
        migrations.AddField(
            model_name='service',
            name='professeur',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='base.Professeur'),
        ),
        migrations.AddField(
            model_name='groupe',
            name='etudiants',
            field=models.ManyToManyField(to='base.Etudiant'),
        ),
        migrations.AddField(
            model_name='enseignement',
            name='classe',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='base.Classe'),
        ),
        migrations.AddField(
            model_name='enseignement',
            name='professeurs',
            field=models.ManyToManyField(through='base.Service', to='base.Professeur'),
        ),
        migrations.AddField(
            model_name='classe',
            name='coordonnateur',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='base.Professeur'),
        ),
        migrations.AddField(
            model_name='classe',
            name='matieres',
            field=models.ManyToManyField(through='base.Enseignement', to='base.Matiere'),
        ),
        migrations.AlterUniqueTogether(
            name='etudiant',
            unique_together=set([('ine',)]),
        ),
    ]
