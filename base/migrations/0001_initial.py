# -*- coding: utf-8 -*-
# Generated by Django 1.11.2 on 2017-08-16 13:59
from __future__ import unicode_literals

import base.uppercasecharfield
from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import re


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0008_alter_user_username_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=30, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('sexe', models.PositiveSmallIntegerField(choices=[(1, 'homme'), (2, 'femme')], default=1)),
            ],
            options={
                'verbose_name': 'user',
                'abstract': False,
                'verbose_name_plural': 'users',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Academie',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nom', models.CharField(max_length=100)),
                ('slug', models.SlugField()),
                ('departements', models.CharField(max_length=100, validators=[django.core.validators.RegexValidator(re.compile('^\\d+(?:\\,\\d+)*\\Z', 32), code='invalid', message='Enter only digits separated by commas.')], verbose_name='départements')),
            ],
            options={
                'verbose_name': 'académie',
                'verbose_name_plural': 'académies',
            },
        ),
        migrations.CreateModel(
            name='Annee',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nom', models.CharField(max_length=100)),
                ('debut', models.DateField(verbose_name='début')),
                ('fin', models.DateField()),
            ],
            options={
                'verbose_name': 'année scolaire',
                'ordering': ['debut'],
                'verbose_name_plural': 'années scolaires',
            },
        ),
        migrations.CreateModel(
            name='Enseignement',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('option', models.BooleanField()),
                ('specialite', models.BooleanField(verbose_name='spécialité')),
            ],
            options={
                'ordering': ['groupe', 'matiere'],
            },
        ),
        migrations.CreateModel(
            name='Etablissement',
            fields=[
                ('numero_uai', base.uppercasecharfield.Lettre23Field(length=8, primary_key=True, serialize=False, unique=True, validators=[django.core.validators.RegexValidator(message="Le code doit être constitué de 8 chiffres suivis d'une lettre code", regex='\\d{8,8}[a-zA-Z]'), django.core.validators.RegexValidator(message="Le code doit être constitué de 8 chiffres suivis d'une lettre code", regex='\\d{8,8}[a-zA-Z]'), django.core.validators.RegexValidator(message="Le code doit être constitué de 8 chiffres suivis d'une lettre code", regex='\\d{8,8}[a-zA-Z]')], verbose_name='UAI')),
                ('appellation', models.CharField(max_length=100)),
                ('denomination', models.CharField(max_length=100)),
                ('adresse', models.TextField(blank=True, verbose_name="adresse de l'établissement")),
                ('email', models.EmailField(blank=True, max_length=254)),
                ('nature_uai', models.PositiveSmallIntegerField(choices=[(101, 'École maternelle'), (102, "École maternelle annexe d'ESPÉ"), (103, "École maternelle d'application"), (111, 'École maternelle spécialisée'), (151, 'École élémentaire'), (152, "École élémentaire annexe d'ESPÉ"), (153, "École élémentaire d'application"), (160, 'École de plein air'), (162, 'École élémentaire spécialisée'), (169, 'École régionale du premier degré'), (170, 'École sans effectif permanent'), (300, "Lycée d'enseignement général et technologique"), (301, "Lycée d'enseignement technologique"), (302, "Lycée d'enseignement général"), (306, 'Lycée polyvalent'), (310, 'Lycée climatique'), (312, 'École secondaire spécialisée (second cycle)'), (315, 'Établissement expérimental'), (320, 'Lycée professionnel'), (332, 'École professionnelle spécialisée'), (334, "Section d'enseignement professionnel"), (335, "Section d'enseignement général ou technologique"), (340, 'Collège'), (349, 'Établissement de réinsertion scolaire'), (350, 'Collège climatique'), (352, 'Collège spécialisé'), (370, "Établissement régional d'enseignement adapté"), (390, "Section d'enseignement général et professionnel adapté")])),
                ('academie', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='base.Academie', verbose_name='académie')),
            ],
            options={
                'verbose_name': 'établissement',
                'ordering': ['numero_uai'],
                'verbose_name_plural': 'établissements',
            },
        ),
        migrations.CreateModel(
            name='Groupe',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nom', models.CharField(max_length=100)),
                ('slug', models.SlugField()),
                ('mode', models.PositiveSmallIntegerField(choices=[(0, 'manuel'), (1, 'automatique')], default=0)),
            ],
        ),
        migrations.CreateModel(
            name='Matiere',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nom', models.CharField(max_length=100)),
                ('virtuelle', models.BooleanField()),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='base.Matiere')),
            ],
            options={
                'verbose_name': 'matière',
                'verbose_name_plural': 'matières',
            },
        ),
        migrations.CreateModel(
            name='Service',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('debut', models.DateField(blank=True, null=True, verbose_name='Date de début')),
                ('fin', models.DateField(blank=True, null=True, verbose_name='Date de fin')),
                ('enseignement', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='base.Enseignement')),
            ],
        ),
        migrations.CreateModel(
            name='Classe',
            fields=[
                ('groupe_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='base.Groupe')),
                ('niveau', models.PositiveSmallIntegerField(choices=[(1, '1è année'), (2, '2è année')])),
            ],
            options={
                'ordering': ['annee', 'niveau', 'nom'],
            },
            bases=('base.groupe',),
        ),
        migrations.CreateModel(
            name='Etudiant',
            fields=[
                ('user_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('entree', models.DateField(blank=True, null=True, verbose_name='entrée')),
                ('sortie', models.DateField(blank=True, null=True)),
                ('ine', base.uppercasecharfield.Lettre23Field(length=11, validators=[django.core.validators.RegexValidator(message="Le code doit être constitué de 11 chiffres suivis d'une lettre code", regex='\\d{11,11}[a-zA-Z]'), django.core.validators.RegexValidator(message="Le code doit être constitué de 11 chiffres suivis d'une lettre code", regex='\\d{11,11}[a-zA-Z]'), django.core.validators.RegexValidator(message="Le code doit être constitué de 11 chiffres suivis d'une lettre code", regex='\\d{11,11}[a-zA-Z]')], verbose_name="INE (numéro d'étudiant)")),
                ('classe', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='base.Classe')),
                ('options', models.ManyToManyField(blank=True, to='base.Matiere')),
                ('origine', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='base.Etablissement', verbose_name="Établissement d'origine")),
            ],
            options={
                'verbose_name': 'étudiant',
                'verbose_name_plural': 'étudiants',
            },
            bases=('base.user',),
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Professeur',
            fields=[
                ('user_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('corps', models.PositiveSmallIntegerField(choices=[(0, 'autre'), (1, 'certifié'), (2, 'agrégé'), (3, 'chaire supérieure')], default=2)),
                ('etablissement', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='base.Etablissement', verbose_name='établissement')),
            ],
            options={
                'verbose_name': 'professeur',
                'verbose_name_plural': 'professeurs',
            },
            bases=('base.user',),
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.AddField(
            model_name='groupe',
            name='annee',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='base.Annee', verbose_name='année'),
        ),
        migrations.AddField(
            model_name='enseignement',
            name='groupe',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='base.Groupe'),
        ),
        migrations.AddField(
            model_name='enseignement',
            name='matiere',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='base.Matiere', verbose_name='matière'),
        ),
        migrations.AddField(
            model_name='user',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
        migrations.AddField(
            model_name='service',
            name='professeur',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='base.Professeur'),
        ),
        migrations.AddField(
            model_name='groupe',
            name='etudiants',
            field=models.ManyToManyField(blank=True, to='base.Etudiant', verbose_name='étudiants'),
        ),
        migrations.AddField(
            model_name='enseignement',
            name='professeurs',
            field=models.ManyToManyField(through='base.Service', to='base.Professeur'),
        ),
        migrations.AddField(
            model_name='classe',
            name='coordonnateur',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='base.Professeur'),
        ),
        migrations.AddField(
            model_name='classe',
            name='enseignements',
            field=models.ManyToManyField(blank=True, to='base.Enseignement'),
        ),
        migrations.AlterUniqueTogether(
            name='etudiant',
            unique_together=set([('ine',)]),
        ),
    ]
