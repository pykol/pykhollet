# Generated by Django 2.0.7 on 2018-08-15 05:45

import datetime
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.db.models.manager
import django.utils.timezone
import pykol.models.base.utilisateurs
import pykol.models.colles.perms
import pykol.models.colles.releve
import pykol.models.fields.lettre23
import pykol.models.fields.note
import re


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0009_alter_user_last_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('sexe', models.PositiveSmallIntegerField(choices=[(1, 'homme'), (2, 'femme')], default=1)),
                ('email', models.EmailField(blank=True, max_length=254, null=True, unique=True, verbose_name='E-mail')),
            ],
            options={
                'verbose_name': 'utilisateur',
                'verbose_name_plural': 'utilisateurs',
                'permissions': (('direction', "Droits de paramétrage de l'équipe de direction"),),
            },
            managers=[
                ('objects', pykol.models.base.utilisateurs.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Academie',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nom', models.CharField(max_length=100)),
                ('slug', models.SlugField()),
                ('departements', models.CharField(max_length=100, validators=[django.core.validators.RegexValidator(re.compile('^\\d+(?:\\,\\d+)*\\Z'), code='invalid', message='Enter only digits separated by commas.')], verbose_name='départements')),
            ],
            options={
                'verbose_name': 'académie',
                'verbose_name_plural': 'académies',
            },
        ),
        migrations.CreateModel(
            name='Annee',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nom', models.CharField(max_length=100)),
                ('debut', models.DateField(verbose_name='début')),
                ('fin', models.DateField()),
            ],
            options={
                'verbose_name': 'année scolaire',
                'verbose_name_plural': 'années scolaires',
                'ordering': ['debut'],
            },
        ),
        migrations.CreateModel(
            name='Colle',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('etat', models.PositiveSmallIntegerField(choices=[(5, 'brouillon'), (0, 'prévue'), (1, 'notée'), (4, 'effectuée'), (2, 'relevée'), (3, 'annulée')], default=0, verbose_name='état')),
                ('duree', models.DurationField(default=datetime.timedelta(0, 3600), verbose_name='durée')),
                ('mode', models.PositiveSmallIntegerField(choices=[(0, 'interrogation'), (1, 'travaux dirigés')], default=0, verbose_name='mode de déroulement')),
            ],
            managers=[
                ('all_objects', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='ColleDetails',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('horaire', models.DateTimeField()),
                ('salle', models.CharField(blank=True, max_length=30)),
                ('actif', models.BooleanField(default=True)),
                ('colle', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pykol.Colle')),
            ],
            options={
                'verbose_name': 'détails de la colle',
                'verbose_name_plural': 'détails de la colle',
            },
        ),
        migrations.CreateModel(
            name='ColleNote',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('note', pykol.models.fields.note.NoteField()),
                ('horaire', models.DateTimeField()),
                ('duree', models.DurationField(verbose_name="durée d'interrogation")),
                ('colle', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pykol.Colle')),
            ],
            options={
                'verbose_name': 'note de colle',
                'verbose_name_plural': 'notes de colle',
            },
        ),
        migrations.CreateModel(
            name='ColleReleve',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateTimeField()),
                ('date_paiement', models.DateTimeField(blank=True, null=True)),
                ('etat', models.PositiveSmallIntegerField(choices=[(0, 'Nouveau'), (1, 'Payé')], default=0, verbose_name='état')),
                ('annee', models.ForeignKey(default=pykol.models.colles.releve.ColleReleve.default_annee, on_delete=django.db.models.deletion.CASCADE, to='pykol.Annee')),
            ],
            options={
                'verbose_name': 'relevé des colles',
                'verbose_name_plural': 'relevés des colles',
            },
        ),
        migrations.CreateModel(
            name='ColleReleveLigne',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('taux', models.PositiveSmallIntegerField(choices=[(1, '1è année - Moins de 20 étudiants'), (2, '1è année - Entre 21 et 35 étudiants'), (3, '1è année - Plus de 35 étudiants'), (4, '2è année - Moins de 20 étudiants'), (5, '2è année - Entre 21 et 35 étudiants'), (6, '2è année - Plus de 35 étudiants')], verbose_name='taux')),
                ('duree_interrogation', models.DurationField(default=datetime.timedelta, verbose_name="durée d'interrogation")),
                ('duree', models.DurationField(default=datetime.timedelta, verbose_name="nombre d'heures")),
                ('etat', models.PositiveSmallIntegerField(choices=[(0, 'Nouveau'), (1, 'Payé')], default=0, verbose_name='état')),
                ('date_paiement', models.DateTimeField(blank=True, null=True)),
                ('releve', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='lignes', to='pykol.ColleReleve')),
            ],
        ),
        migrations.CreateModel(
            name='CollesEnseignement',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('frequence', models.SmallIntegerField(choices=[(1, 'par semaine'), (2, 'par trimestre')], verbose_name='fréquence')),
                ('duree_frequentielle', models.DurationField(verbose_name='durée fréquentielle')),
                ('periode', models.SmallIntegerField(choices=[(0, 'année complète'), (1, 'première période'), (2, 'deuxième période')], default=0, verbose_name='période')),
            ],
        ),
        migrations.CreateModel(
            name='CollesReglages',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('numeros_auto', models.BooleanField(default=False, verbose_name='numérotation automatique')),
                ('numeros_format', models.CharField(blank=True, default='{numero}', max_length=100, verbose_name='format des numéros')),
            ],
        ),
        migrations.CreateModel(
            name='ColloscopePermission',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('matiere_seulement', models.BooleanField(verbose_name='Restreindre à sa matière')),
                ('droit', models.ForeignKey(limit_choices_to=pykol.models.colles.perms.ColloscopePermission.droit_choices, on_delete=django.db.models.deletion.CASCADE, to='auth.Permission')),
            ],
            options={
                'verbose_name': 'permission sur le colloscope',
                'verbose_name_plural': 'permissions sur le colloscope',
            },
        ),
        migrations.CreateModel(
            name='Creneau',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('jour', models.PositiveSmallIntegerField(choices=[(1, 'lundi'), (2, 'mardi'), (3, 'mercredi'), (4, 'jeudi'), (5, 'vendredi'), (6, 'samedi'), (7, 'dimanche')])),
                ('debut', models.TimeField(verbose_name='début')),
                ('fin', models.TimeField()),
                ('salle', models.CharField(blank=True, max_length=30)),
            ],
            options={
                'verbose_name': 'créneau',
                'verbose_name_plural': 'créneaux',
                'ordering': ['jour', 'debut', 'matiere'],
            },
        ),
        migrations.CreateModel(
            name='Dotation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField()),
                ('heures', models.IntegerField(verbose_name="nombre d'heures")),
                ('annee', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pykol.Annee')),
            ],
        ),
        migrations.CreateModel(
            name='Enseignement',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('option', models.BooleanField()),
                ('specialite', models.BooleanField(verbose_name='spécialité')),
            ],
            options={
                'ordering': ['groupe', 'matiere'],
            },
        ),
        migrations.CreateModel(
            name='Etablissement',
            fields=[
                ('numero_uai', pykol.models.fields.lettre23.Lettre23Field(length=8, primary_key=True, serialize=False, unique=True, verbose_name='UAI')),
                ('appellation', models.CharField(max_length=100)),
                ('denomination', models.CharField(max_length=100)),
                ('adresse', models.TextField(blank=True, verbose_name="adresse de l'établissement")),
                ('email', models.EmailField(blank=True, max_length=254)),
                ('nature_uai', models.PositiveSmallIntegerField(choices=[(101, 'École maternelle'), (102, "École maternelle annexe d'ESPÉ"), (103, "École maternelle d'application"), (111, 'École maternelle spécialisée'), (151, 'École élémentaire'), (152, "École élémentaire annexe d'ESPÉ"), (153, "École élémentaire d'application"), (160, 'École de plein air'), (162, 'École élémentaire spécialisée'), (169, 'École régionale du premier degré'), (170, 'École sans effectif permanent'), (300, "Lycée d'enseignement général et technologique"), (301, "Lycée d'enseignement technologique"), (302, "Lycée d'enseignement général"), (306, 'Lycée polyvalent'), (310, 'Lycée climatique'), (312, 'École secondaire spécialisée (second cycle)'), (315, 'Établissement expérimental'), (320, 'Lycée professionnel'), (332, 'École professionnelle spécialisée'), (334, "Section d'enseignement professionnel"), (335, "Section d'enseignement général ou technologique"), (340, 'Collège'), (349, 'Établissement de réinsertion scolaire'), (350, 'Collège climatique'), (352, 'Collège spécialisé'), (370, "Établissement régional d'enseignement adapté"), (390, "Section d'enseignement général et professionnel adapté")])),
                ('academie', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='pykol.Academie', verbose_name='académie')),
            ],
            options={
                'verbose_name': 'établissement',
                'verbose_name_plural': 'établissements',
                'ordering': ['numero_uai'],
            },
        ),
        migrations.CreateModel(
            name='Groupe',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nom', models.CharField(max_length=100)),
                ('slug', models.SlugField()),
                ('mode', models.PositiveSmallIntegerField(choices=[(0, 'manuel'), (1, 'automatique')], default=0)),
            ],
        ),
        migrations.CreateModel(
            name='Matiere',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nom', models.CharField(max_length=100)),
                ('virtuelle', models.BooleanField()),
                ('code_matiere', models.CharField(blank=True, max_length=20, unique=True)),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='pykol.Matiere')),
            ],
            options={
                'verbose_name': 'matière',
                'verbose_name_plural': 'matières',
            },
        ),
        migrations.CreateModel(
            name='MEFMatiere',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('mode_election', models.CharField(max_length=10)),
                ('rang', models.SmallIntegerField()),
                ('matiere', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pykol.Matiere')),
            ],
        ),
        migrations.CreateModel(
            name='ModuleElementaireFormation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code_mef', models.CharField(max_length=11)),
                ('libelle', models.CharField(max_length=100)),
                ('matieres', models.ManyToManyField(through='pykol.MEFMatiere', to='pykol.Matiere')),
            ],
        ),
        migrations.CreateModel(
            name='Roulement',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='RoulementApplication',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('roulement', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='graines', to='pykol.Roulement')),
            ],
        ),
        migrations.CreateModel(
            name='RoulementGraineLigne',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('decalage', models.PositiveSmallIntegerField()),
                ('application', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='lignes', to='pykol.RoulementApplication')),
            ],
        ),
        migrations.CreateModel(
            name='RoulementLigne',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ordre', models.PositiveSmallIntegerField()),
                ('creneau', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pykol.Creneau')),
                ('roulement', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='lignes', to='pykol.Roulement')),
            ],
        ),
        migrations.CreateModel(
            name='Semaine',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('debut', models.DateField(verbose_name='début')),
                ('fin', models.DateField()),
                ('numero', models.TextField(verbose_name='numéro')),
            ],
            options={
                'ordering': ['debut'],
            },
        ),
        migrations.CreateModel(
            name='Service',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('debut', models.DateField(blank=True, null=True, verbose_name='Date de début')),
                ('fin', models.DateField(blank=True, null=True, verbose_name='Date de fin')),
                ('enseignement', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pykol.Enseignement')),
            ],
        ),
        migrations.CreateModel(
            name='Vacances',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nom', models.CharField(max_length=100)),
                ('debut', models.DateField(verbose_name='début')),
                ('fin', models.DateField()),
                ('annee', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='vacances', to='pykol.Annee')),
            ],
            options={
                'verbose_name': 'vacances',
                'verbose_name_plural': 'vacances',
            },
        ),
        migrations.CreateModel(
            name='Classe',
            fields=[
                ('groupe_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='pykol.Groupe')),
                ('code_structure', models.CharField(max_length=20, unique=True)),
                ('niveau', models.PositiveSmallIntegerField(choices=[(1, '1è année'), (2, '2è année')])),
            ],
            options={
                'ordering': ['annee', 'niveau', 'nom'],
                'permissions': (('change_colloscope', 'Modification du colloscope de la classe'), ('view_colloscope', 'Consultation du colloscope de la classe')),
            },
            bases=('pykol.groupe',),
        ),
        migrations.CreateModel(
            name='Etudiant',
            fields=[
                ('user_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('entree', models.DateField(blank=True, null=True, verbose_name='entrée')),
                ('sortie', models.DateField(blank=True, null=True)),
                ('ine', models.CharField(max_length=11, verbose_name="INE (numéro d'étudiant)")),
            ],
            options={
                'verbose_name': 'étudiant',
                'verbose_name_plural': 'étudiants',
            },
            bases=('pykol.user',),
            managers=[
                ('objects', pykol.models.base.utilisateurs.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Professeur',
            fields=[
                ('user_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('corps', models.PositiveSmallIntegerField(choices=[(0, 'autre'), (1, 'certifié'), (2, 'agrégé'), (3, 'chaire supérieure')], default=2)),
                ('etablissement', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='pykol.Etablissement', verbose_name='établissement')),
            ],
            options={
                'verbose_name': 'professeur',
                'verbose_name_plural': 'professeurs',
            },
            bases=('pykol.user',),
            managers=[
                ('objects', pykol.models.base.utilisateurs.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Trinome',
            fields=[
                ('groupe_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='pykol.Groupe')),
                ('commentaire', models.TextField(blank=True)),
            ],
            bases=('pykol.groupe',),
        ),
        migrations.AddField(
            model_name='roulementapplication',
            name='semaines',
            field=models.ManyToManyField(blank=True, to='pykol.Semaine'),
        ),
        migrations.AddField(
            model_name='roulement',
            name='creneaux',
            field=models.ManyToManyField(through='pykol.RoulementLigne', to='pykol.Creneau'),
        ),
        migrations.AddField(
            model_name='mefmatiere',
            name='mef',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pykol.ModuleElementaireFormation'),
        ),
        migrations.AddField(
            model_name='groupe',
            name='annee',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pykol.Annee', verbose_name='année'),
        ),
        migrations.AddField(
            model_name='enseignement',
            name='groupe',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pykol.Groupe'),
        ),
        migrations.AddField(
            model_name='enseignement',
            name='matiere',
            field=models.ForeignKey(blank=True, limit_choices_to={'virtuelle': False}, null=True, on_delete=django.db.models.deletion.SET_NULL, to='pykol.Matiere', verbose_name='matière'),
        ),
        migrations.AddField(
            model_name='creneau',
            name='matiere',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='pykol.Matiere', verbose_name='matière'),
        ),
        migrations.AddField(
            model_name='colloscopepermission',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='utilisateur'),
        ),
        migrations.AddField(
            model_name='collesenseignement',
            name='enseignement',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pykol.Enseignement'),
        ),
        migrations.AddField(
            model_name='colle',
            name='creneau',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='pykol.Creneau', verbose_name='créneau'),
        ),
        migrations.AddField(
            model_name='colle',
            name='groupe',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='pykol.Groupe'),
        ),
        migrations.AddField(
            model_name='colle',
            name='matiere',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='pykol.Matiere', verbose_name='matière'),
        ),
        migrations.AddField(
            model_name='colle',
            name='releve',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='pykol.ColleReleve'),
        ),
        migrations.AddField(
            model_name='colle',
            name='semaine',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='pykol.Semaine'),
        ),
        migrations.AddField(
            model_name='user',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
        migrations.CreateModel(
            name='DotationClasse',
            fields=[
                ('classe', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='dotation_heures', serialize=False, to='pykol.Classe')),
                ('heures', models.PositiveIntegerField(verbose_name="nombre d'heures")),
            ],
        ),
        migrations.AddField(
            model_name='trinome',
            name='dans_classe',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='trinomes', to='pykol.Classe', verbose_name='classe'),
        ),
        migrations.AddField(
            model_name='service',
            name='professeur',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='pykol.Professeur'),
        ),
        migrations.AddField(
            model_name='semaine',
            name='classe',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pykol.Classe'),
        ),
        migrations.AddField(
            model_name='roulementgraineligne',
            name='trinome',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='pykol.Trinome'),
        ),
        migrations.AddField(
            model_name='roulementapplication',
            name='trinomes',
            field=models.ManyToManyField(through='pykol.RoulementGraineLigne', to='pykol.Trinome'),
        ),
        migrations.AddField(
            model_name='roulement',
            name='classe',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pykol.Classe'),
        ),
        migrations.AddField(
            model_name='groupe',
            name='etudiants',
            field=models.ManyToManyField(blank=True, to='pykol.Etudiant', verbose_name='étudiants'),
        ),
        migrations.AddField(
            model_name='etudiant',
            name='classe',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='pykol.Classe'),
        ),
        migrations.AddField(
            model_name='etudiant',
            name='options',
            field=models.ManyToManyField(blank=True, to='pykol.Matiere'),
        ),
        migrations.AddField(
            model_name='etudiant',
            name='origine',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='pykol.Etablissement', verbose_name="Établissement d'origine"),
        ),
        migrations.AddField(
            model_name='enseignement',
            name='professeurs',
            field=models.ManyToManyField(through='pykol.Service', to='pykol.Professeur'),
        ),
        migrations.AddField(
            model_name='creneau',
            name='classe',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pykol.Classe'),
        ),
        migrations.AddField(
            model_name='creneau',
            name='colleur',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='pykol.Professeur'),
        ),
        migrations.AddField(
            model_name='colloscopepermission',
            name='classe',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pykol.Classe'),
        ),
        migrations.AddField(
            model_name='collesreglages',
            name='classe',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='pykol.Classe'),
        ),
        migrations.AddField(
            model_name='collereleveligne',
            name='colleur',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pykol.Professeur'),
        ),
        migrations.AddField(
            model_name='collenote',
            name='eleve',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pykol.Etudiant'),
        ),
        migrations.AddField(
            model_name='colledetails',
            name='colleur',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='pykol.Professeur'),
        ),
        migrations.AddField(
            model_name='colledetails',
            name='eleves',
            field=models.ManyToManyField(blank=True, db_index=True, to='pykol.Etudiant', verbose_name='élèves'),
        ),
        migrations.AddField(
            model_name='colle',
            name='classe',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pykol.Classe'),
        ),
        migrations.AddField(
            model_name='classe',
            name='coordonnateur',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='pykol.Professeur'),
        ),
        migrations.AddField(
            model_name='classe',
            name='enseignements',
            field=models.ManyToManyField(blank=True, to='pykol.Enseignement'),
        ),
        migrations.AddField(
            model_name='classe',
            name='mef',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pykol.ModuleElementaireFormation'),
        ),
        migrations.AlterUniqueTogether(
            name='roulementgraineligne',
            unique_together={('trinome', 'application')},
        ),
        migrations.AlterUniqueTogether(
            name='groupe',
            unique_together={('nom', 'annee')},
        ),
        migrations.AlterUniqueTogether(
            name='etudiant',
            unique_together={('ine',)},
        ),
        migrations.AlterUniqueTogether(
            name='collesreglages',
            unique_together={('classe',)},
        ),
    ]
