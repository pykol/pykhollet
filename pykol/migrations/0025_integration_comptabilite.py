# Generated by Django 2.1 on 2019-02-28 20:48

from django.db import migrations, models
import django.db.models.deletion

"""
Grosse migration qui intègre la comptabilité dans les modèles existants.

Cette migration crée toute la hiérarchie de comptes et l'attache aux
modèles déjà existants dans pyKol. Elle tente de réinventer à postériori
tous les mouvements de comptes à partir des colloscopes et des relevés
d'heures, comme s'ils avaient été créés directement.
"""

def cree_comptes_rectorats(apps, schema_editor):
	"""
	Création des comptes de dotation et de paiement de chaque rectorat
	"""
	Academie = apps.get_model('pykol', 'Academie')
	Compte = apps.get_model('pykol', 'Compte')

	racine_rectorats = Compte(categorie=Compte.CATEGORIE_REVENUS,
		nom="Rectorats")
	racine_rectorats.save()

	racine_asie = Compte(categorie=Compte.CATEGORIE_DEPENSES,
		nom="Paiements")
	racine_asie.save()

	for academie in Academie.objects.all():
		academie.compte_dotation = Compte(
			categorie=Compte.CATEGORIE_REVENUS,
			nom=str(academie),
			parent=racine_rectorats)

		academie.compte_paiement = Compte(
			categorie=Compte.CATEGORIE_DEPENSES,
			nom=str(academie),
			parent=racine_asie)

		academie.compte_dotation.save()
		academie.compte_paiement.save()
		academie.save()

def reverse_cree_comptes_rectorats(apps, schema_editor):
	"""
	Suppression des compte_dotation et des compte_paiement des
	académies. On supprime aussi les comptes racines des rectorats.
	"""
	Compte = apps.get_model('pykol', 'Compte')
	Compte.objects.filter(
		models.Q(rectorat__isnull=False) |
		models.Q(asie__isnull=False)
		).get_ancestors(include_self=True).delete()

def cree_comptes_classes(apps, schema_editor):
	"""
	Création des comptes de dotation en heures pour chaque classe.

	Ces comptes sont placés sous une racine unique qui regroupe toutes
	les classes de l'établissement.
	"""
	Compte = apps.get_model('pykol', 'Compte')
	Classe = apps.get_model('pykol', 'Classe')

	racine_classes = Compte(categorie=Compte.CATEGORIE_ACTIFS,
		nom="Établissement")
	racine_classes.save()

	for classe in Classe.all_objects.all():
		classe.compte_colles = Compte(
			categorie=Compte.CATEGORIE_ACTIFS,
			nom="{classe} - {annee}".format(classe=classe,
				annee=classe.annee),
			parent=racine_classes)

		classe.compte_colles.save()
		classe.save()

def reverse_cree_comptes_classes(apps, schema_editor):
	"""
	Suppression des comptes des classes et de leurs ancêtres.
	"""
	Compte = apps.get_model('pykol', 'Compte')
	Compte.objects.filter(classe__isnull=False
		).get_ancestors(include_self=True).delete()

def cree_comptes_enseignements(apps, schema_editor):
	"""
	Création d'un compte de dotation en heure pour chaque groupe
	d'enseignements dotés en colles.
	"""
	Compte = apps.get_model('pykol', 'Compte')
	CollesEnseignement = apps.get_model('pykol', 'CollesEnseignement')

	for cens in CollesEnseignement.objects.all():
		cens.compte_colles = Compte(
			categorie=Compte.CATEGORIE_ACTIFS,
			nom=str(cens),
			parent=cens.classe.compte_colles)
		cens.compte_colles.save()
		# TODO créer des sous-comptes pour chaque enseignement ?

def reverse_cree_comptes_enseignements(apps, schema_editor):
	"""
	Suppression des comptes des objets ColleEnseignement.
	"""
	Compte = apps.get_model('pykol', 'Compte')
	Compte.objects.filter(colleenseignement__isnull=False
		).delete()

def cree_comptes_professeurs(apps, schema_editor):
	"""
	Création des comptes d'heures prévues et d'heures effectuées pour
	tous les professeurs.
	"""
	Compte = apps.get_model('pykol', 'Compte')
	Professeur = apps.get_model('pykol', 'Professeur')

	racine_profs = Compte(categorie=Compte.CATEGORIE_ACTIFS,
		nom="Professeurs")
	racine_profs.save()

	for prof in Professeur.objects.all():
		compte_prof = Compte(
			categorie=Compte.CATEGORIE_ACTIFS,
			nom=str(Professeur),
			parent=racine_profs,
			proprietaire=prof.user)
		compte_prof.save()

		prof.compte_prevu = Compte(
			categorie=Compte.CATEGORIE_ACTIFS,
			nom="Colles prévues",
			parent=compte_prof,
			proprietaire=prof.user)
		prof.compte_prevu.save()

		prof.compte_effectue = Compte(
			categorie=Compte.CATEGORIE_ACTIFS,
			nom="Colles effectuées",
			parent=compte_prof,
			proprietaire=prof.user)
		prof.compte_effectue.save()

def reverse_cree_comptes_professeurs(apps, schema_editor):
	"""
	Suppression des comptes associés aux professeurs.
	"""
	Compte = apps.get_model('pykol', 'Compte')
	Compte.objects.filter(
		models.Q(professeur_prevues__isnull=False) |
		models.Q(professeur_effectue__isnull=False)
		).get_ancestors(include_self=True).delete()

def comptabilite_colloscopes(apps, schema_editor):
	"""
	Ajout des mouvements de comptes pour les colles prévues et les
	colles effectuées.
	"""
	Colle = apps.get_model('pykol', 'Colle')
	Mouvement = apps.get_model('pykol', 'Mouvement')
	MouvementLigne = apps.get_model('pykol', 'MouvementLigne')

	for colle in Colle.objects.all():
		# On ajoute un premier mouvement correspondant à la création de
		# la colle. Ce mouvement débite la dotation de la classe.
		mv = Mouvement.virement(
			compte_debit=colle.colles_ens.compte_colles,
			compte_credit=colle.details.colleur.compte_prevu,
			duree=colle.duree,
			duree_interrogation=colle.duree_interrogation,
			annee=colle.classe.annee,
			motif="Ajout au colloscope en {classe} de la colle du {date}".format(
				classe=colle.classe,
				date=colle.details.horaire),
			colle=colle)
		# Confirmation du mouvement si la colle n'est pas en brouillon
		if colle.etat != Colle.ETAT_BROUILLON:
			mv.etat = Mouvement.ETAT_VALIDE

		# Si la colle est annulée, on crée le mouvement inverse pour
		# rendre la dotation à la classe.
		if colle.etat == Colle.ETAT_ANNULEE:
			mv.virement_retour()

		# Si la colle est notée, effectuée ou relevée, on transfère les
		# heures au compte d'heures effectuées par le professeur. Les
		# heures relevées seront transférées plus tard par la fonction
		# migrer_releves vers le compte d'heures du relevé.
		if colle.est_effectuee:
			Mouvement.virement(
				compte_debit=colle.details.colleur.compte_prevu,
				compte_credit=colle.details.colleur.compte_effectue,
				duree=colle.duree,
				duree_interrogation=colle.duree_interrogation,
				annee=colle.classe.annee,
				motif="Colle du {date} en {classe} effectuée".format(
					classe=colle.classe,
					date=colle.details.horaire),
				colle=colle)

def reverse_comptabilite_colloscopes(apps, schema_editor):
	"""
	Suppression des mouvements de comptes provenant de colles.
	"""
	Mouvement = apps.get_model('pykol', 'Mouvement')
	Mouvement.objects.filter(colle__isnull=False).delete()

def migrer_releves(apps, schema_editor):
	"""
	Ajout d'un compte par relevé et des mouvements de comptes
	correspondant au relevé et au paiement des heures de colles.
	"""
	ColleReleve = apps.get_model('pykol', 'ColleReleve')
	Compte = apps.get_model('pykol', 'Compte')
	ColleReleveLigne = apps.get_model('pykol', 'ColleReleveLigne')
	Mouvement = apps.get_model('pykol', 'Mouvement')
	MouvementLigne = apps.get_model('pykol', 'MouvementLigne')
	Colle = apps.get_model('pykol', 'Colle')

	# TODO création des comptes des ColleReleve
	for releve in ColleReleve.objects.all():
		compte_colles = Compte(
				...)
		compte_colles.save()
		releve.compte_colles = compte_colles

	# Création des mouvements comptables correspondant au paiement des
	# colles.
	for ligne_releve in ColleReleveLigne.objects.all():
		mv = Mouvement(
			annee=ligne_releve.releve.annee,
			motif="Relevé du {date}".format(date=ligne_releve.releve.date),
			etat=Mouvement.ETAT_RELEVE)
		mv.save()
		ligne_releve.mouvement = mv
		ligne_releve.save()

		# Ajout de la ligne de crédit vers le compte du relevé
		ligne_credit = MouvementLigne(
			compte=ligne_releve.releve.compte_colles,
			mouvement=mv,
			duree=ligne_releve.duree,
			duree_interrogation=ligne_releve.duree_interrogation,
			taux=ligne_releve.taux)
		ligne_credit.save()
	
	# Création des lignes de débit des colles relevées
	for colle in Colle.objects.filter(releve__isnull=False):
		colleur = colle.details.colleur
		taux = ColleReleveLigne.taux_colle(colle.classe)
		ligne = colle.releve.lignes.get(colleur=colleur, taux=taux)

		if colle.mode == Colle.MODE_INTERROGATION:
			duree_interrogation = colle.collenote_set.aggregate(
					duree_interrogation=Sum('duree_interrogation')
				)['duree_interrogation']
		else:
			duree_interrogation = colle.duree

		MouvementLigne(
			compte=colleur.compte_effectue,
			mouvement=ligne.mouvement,
			duree=-colle.duree,
			duree_interrogation=-duree_interrogation,
			taux=taux).save()

def reverse_migrer_releves(apps, schema_editor):
	"""
	Suppression des mouvements de comptes provenant de relevés.
	"""
	Mouvement = apps.get_model('pykol', 'Mouvement')
	Mouvement.objects.filter(releve__isnull=False).delete()

class Migration(migrations.Migration):

	dependencies = [
		('pykol', '0024_lien_etablissement'),
	]

	operations = [
		migrations.AddField(
			model_name='academie',
			name='compte_dotation',
			field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rectorat', to='pykol.Compte'),
			preserve_default=False,
		),
		migrations.AddField(
			model_name='academie',
			name='compte_paiement',
			field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='asie', to='pykol.Compte'),
			preserve_default=False,
		),
		migrations.RunPython(cree_comptes_rectorats, reverse_cree_comptes_rectorats),
		migrations.AlterField(
			model_name='academie',
			name='compte_dotation',
			field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='rectorat', to='pykol.Compte'),
		),
		migrations.AlterField(
			model_name='academie',
			name='compte_paiement',
			field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='asie', to='pykol.Compte'),
		),


		migrations.AddField(
			model_name='classe',
			name='compte_colles',
			field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='pykol.Compte'),
			preserve_default=False,
		),
		migrations.RunPython(cree_comptes_classes, reverse_cree_comptes_classes),
		migrations.AlterField(
			model_name='classe',
			name='compte_colles',
			field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='pykol.Compte'),
			preserve_default=False,
		),



        migrations.AddField(
            model_name='collesenseignement',
            name='compte_colles',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='pykol.Compte'),
            preserve_default=False,
        ),
		migrations.RunPython(cree_comptes_enseignements, reverse_cree_comptes_enseignements),
        migrations.AlterField(
            model_name='collesenseignement',
            name='compte_colles',
            field=models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, to='pykol.Compte'),
            preserve_default=False,
        ),


		migrations.AddField(
			model_name='professeur',
			name='compte_effectue',
			field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='professeur_effectue', to='pykol.Compte'),
			preserve_default=False,
		),
		migrations.AddField(
			model_name='professeur',
			name='compte_prevu',
			field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='professeur_prevues', to='pykol.Compte'),
			preserve_default=False,
		),
		migrations.RunPython(cree_comptes_professeurs, reverse_cree_comptes_professeurs),
		migrations.AlterField(
			model_name='professeur',
			name='compte_effectue',
			field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='professeur_effectue', to='pykol.Compte'),
			preserve_default=False,
		),
		migrations.AlterField(
			model_name='professeur',
			name='compte_prevu',
			field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='professeur_prevues', to='pykol.Compte'),
			preserve_default=False,
		),

        migrations.AddField(
            model_name='mouvement',
            name='colle',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='pykol.Colle'),
        ),

		migrations.RunPython(comptabilite_colloscopes, reverse_comptabilite_colloscopes),


		migrations.AddField(
			model_name='collereleve',
			name='compte_colles',
			field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='pykol.Compte'),
			preserve_default=False,
		),
		migrations.AddField(
			model_name='collereleveligne',
			name='mouvement',
			field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='pykol.Mouvement'),
			preserve_default=False,
		),
		migrations.RunPython(migrer_releves, reverse_migrer_releves),
		migrations.AlterField(
			model_name='collereleve',
			name='compte_colles',
			field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='pykol.Compte'),
			preserve_default=False,
		),
		migrations.AlterField(
			model_name='collereleveligne',
			name='mouvement',
			field=models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, to='pykol.Mouvement'),
			preserve_default=False,
		),



		migrations.AddField(
			model_name='etablissement',
			name='compte_colles',
			field=models.ForeignKey(default=42, on_delete=django.db.models.deletion.PROTECT, to='pykol.Compte'),
			preserve_default=False,
		),
	]
